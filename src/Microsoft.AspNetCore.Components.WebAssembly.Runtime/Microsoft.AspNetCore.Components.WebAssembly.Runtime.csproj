<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netstandard1.0</TargetFramework>
    <PackageDescription>Binaries for the .NET WebAssembly runtime and build tools used in Blazor applications.</PackageDescription>
    <IsPackable>true</IsPackable>
    <IsShipping>true</IsShipping>
    <NoPackageAnalysis>true</NoPackageAnalysis>
    <NuspecFile>Microsoft.AspNetCore.Components.WebAssembly.Runtime.nuspec</NuspecFile>
  </PropertyGroup>

  <PropertyGroup>
    <BlazorBuildToolsExe>$(ArtifactsBinDir)Microsoft.AspNetCore.Blazor.BuildTools/$(Configuration)/netcoreapp2.1/Microsoft.AspNetCore.Blazor.BuildTools.dll</BlazorBuildToolsExe>
    <MonoIncomingDir>$(MSBuildThisFileDirectory)incoming\</MonoIncomingDir>
    <MonoDistDir>$(MSBuildThisFileDirectory)dist\</MonoDistDir>
    <BclWipeSpecDir>$(MSBuildThisFileDirectory)bclwipe\</BclWipeSpecDir>
  </PropertyGroup>

  <ItemGroup>
    <WasmItemsToCopy Include="$(MonoIncomingDir)wasm\*" />
    <WasmItemsToCopy Include="..\TimeZoneData\dotnet.timezones.dat" />

    <BclItemsToCopy Include="$(MonoIncomingDir)bcl\**" />
    <FrameworkItemsToCopy Include="$(MonoIncomingDir)framework\**" />
    <BclWipeSpecFiles Include="$(BclWipeSpecDir)**" />
  </ItemGroup>

  <Target Name="OptimizeMono" DependsOnTargets="OptimizeMonoWasm; OptimizeBcl" BeforeTargets="Build" />

  <Target Name="OptimizeMonoWasm">
    <ItemGroup>
      <_WasmItemsToCopy Include="@(WasmItemsToCopy)"
        DestinationPath="$(MonoDistDir)wasm\%(RecursiveDir)%(FileName)%(Extension)"
        Condition="'%(Extension)'!='.js'" />

      <_WasmItemsToCopy Include="@(WasmItemsToCopy)"
        DestinationPath="$(MonoDistDir)wasm\%(RecursiveDir)%(FileName).$(PackageVersion)%(Extension)"
        Condition="'%(Extension)'=='.js'" />
    </ItemGroup>

    <!-- TODO: Implement WASM code stripping like in prototype -->
    <Message Importance="High" Text="Creating optimized Mono WebAssembly build" />
    <Copy SourceFiles="@(_WasmItemsToCopy)" DestinationFiles="%(_WasmItemsToCopy.DestinationPath)" />
  </Target>

  <Target Name="OptimizeBcl" Inputs="@(BclItemsToCopy);@(BclWipeSpecFiles)" Outputs="@(BclItemsToCopy->'$(MonoDistDir)bcl\%(RecursiveDir)%(FileName)%(Extension)')">
    <!-- Ensure the buildtools project builds first so we can use the resulting executable -->
    <MSBuild Projects="..\Microsoft.AspNetCore.Blazor.BuildTools\Microsoft.AspNetCore.Blazor.BuildTools.csproj" />

    <Message Importance="High" Text="Creating optimized BCL build" />
    <Copy SourceFiles="@(BclItemsToCopy)" DestinationFiles="@(BclItemsToCopy->'$(MonoDistDir)bcl\%(RecursiveDir)%(FileName)%(Extension)')">
      <Output TaskParameter="CopiedFiles" ItemName="_BclFilesCopied" />
    </Copy>
    <Copy SourceFiles="@(FrameworkItemsToCopy)" DestinationFiles="@(FrameworkItemsToCopy->'$(MonoDistDir)framework\%(RecursiveDir)%(FileName)%(Extension)')">
      <Output TaskParameter="CopiedFiles" ItemName="_FrameworkFilesCopied" />
    </Copy>
    <Exec Command="&quot;$(DotNetTool)&quot; &quot;$(BlazorBuildToolsExe)&quot; ilwipe -s &quot;$(BclWipeSpecDir.TrimEnd('\'))&quot; -i &quot;$(MonoIncomingDir)bcl&quot; -o &quot;$(MonoDistDir)bcl&quot;" />
    <Touch Files="@(_BclFilesCopied)" /> <!-- Make incremental builds work -->
    <Touch Files="@(_FrameworkFilesCopied)" /> <!-- Make incremental builds work -->
  </Target>

</Project>
